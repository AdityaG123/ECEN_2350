$date
	Sun Oct 06 19:08:27 2019
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module tbdesign1 $end
$var wire 8 ! my_LEDS [7:0] $end
$var wire 8 " my_HEX5 [7:0] $end
$var wire 8 # my_HEX4 [7:0] $end
$var wire 8 $ my_HEX3 [7:0] $end
$var wire 8 % my_HEX2 [7:0] $end
$var wire 8 & my_HEX1 [7:0] $end
$var wire 8 ' my_HEX0 [7:0] $end
$var reg 2 ( my_KEYS [1:0] $end
$var reg 8 ) my_SW [7:0] $end
$scope module U0 $end
$var wire 2 * KEY [1:0] $end
$var wire 8 + SW [7:0] $end
$var wire 8 , LEDR [7:0] $end
$var wire 8 - HEX5 [7:0] $end
$var wire 8 . HEX4 [7:0] $end
$var wire 8 / HEX3 [7:0] $end
$var wire 8 0 HEX2 [7:0] $end
$var wire 8 1 HEX1 [7:0] $end
$var wire 8 2 HEX0 [7:0] $end
$var wire 24 3 Bday [23:0] $end
$scope module U0 $end
$var wire 4 4 num [3:0] $end
$var reg 8 5 HEX [7:0] $end
$upscope $end
$scope module U1 $end
$var wire 4 6 num [3:0] $end
$var reg 8 7 HEX [7:0] $end
$upscope $end
$scope module U2 $end
$var wire 4 8 num [3:0] $end
$var reg 8 9 HEX [7:0] $end
$upscope $end
$scope module U3 $end
$var wire 4 : num [3:0] $end
$var reg 8 ; HEX [7:0] $end
$upscope $end
$scope module U4 $end
$var wire 4 < num [3:0] $end
$var reg 8 = HEX [7:0] $end
$upscope $end
$scope module U5 $end
$var wire 4 > num [3:0] $end
$var reg 8 ? HEX [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111 ?
bx00x >
b11111111 =
bx00x <
b11111111 ;
b1x0 :
b11000000 9
b0 8
b11111111 7
b0x10 6
b11111111 5
b0x 4
b0x0x10000001x0x00xx00x 3
b11111111 2
b11111111 1
b11111111 0
b11000000 /
b11111111 .
b11111111 -
bx ,
bx +
bx *
bx )
bx (
b11111111 '
b11111111 &
b11111111 %
b11000000 $
b11111111 #
b11111111 "
bx !
$end
#100
b11000000 "
b11000000 -
b11000000 5
b10000010 #
b10000010 .
b10000010 7
b10000010 %
b10000010 0
b10000010 ;
b11000000 &
b11000000 1
b11000000 =
b11000000 '
b11000000 2
b11000000 ?
b0 4
b110 6
b110 :
b0 <
b0 >
b1100000011000000000 3
bx0 (
bx0 *
#200
b11111001 "
b11111001 -
b11111001 5
b10100100 #
b10100100 .
b10100100 7
b10011001 %
b10011001 0
b10011001 ;
b10011000 &
b10011000 1
b10011000 =
b10011000 '
b10011000 2
b10011000 ?
b1 4
b10 6
b100 :
b1001 <
b1001 >
b100100000010010011001 3
bx1 (
bx1 *
#300
b1110000 !
b1110000 ,
b11 (
b11 *
b10001111 )
b10001111 +
#400
b10001111 !
b10001111 ,
b1 (
b1 *
